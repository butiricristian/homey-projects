# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe("/projects", type: :request) do
  # This should return the minimal set of attributes required to create a valid
  # Project. As you add validations to Project, be sure to
  # adjust the attributes here as well.
  let!(:project) { create(:project) }

  let(:valid_attributes) do
    {
      title: "Project 2",
      description: "Description 2",
      status: :inactive,
    }
  end
  let(:invalid_attributes) do
    {
      title: "",
      description: "",
      status: :inactive,
    }
  end

  let(:user) { create(:user) }
  before(:each) do
    sign_in user
  end

  describe "GET /index" do
    it "renders a successful response" do
      get projects_url
      expect(response).to(be_successful)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      get project_url(project)
      expect(response).to(be_successful)
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_project_url
      expect(response).to(be_successful)
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      get edit_project_url(project)
      expect(response).to(be_successful)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Project" do
        expect do
          post(projects_url, params: { project: valid_attributes })
        end.to(change(Project, :count).by(1))
      end

      it "redirects to the created project" do
        post projects_url, params: { project: valid_attributes }
        expect(response).to(redirect_to(project_url(Project.last)))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Project" do
        expect do
          post(projects_url, params: { project: invalid_attributes })
        end.to(change(Project, :count).by(0))
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post projects_url, params: { project: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      it "updates the requested project" do
        patch project_url(project), params: { project: valid_attributes }
        project.reload
        expected_attributes = valid_attributes.map { |key, value| [key, value.to_s] }.to_h
        expect(project).to(have_attributes(expected_attributes))
      end

      it "redirects to the project" do
        patch project_url(project), params: { project: valid_attributes }
        project.reload
        expect(response).to(redirect_to(project_url(project)))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch project_url(project), params: { project: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe "PATCH /toggle_status" do
    context "with valid parameters" do
      before(:each) { project.update(status: :active) }

      it "toggles the status of the requested project" do
        patch toggle_status_project_url(project), params: { project: { status: :inactive } }
        project.reload
        expect(project.status.to_sym).to(eq(:inactive))
      end

      it "returns success" do
        patch toggle_status_project_url(project), params: { project: { status: :inactive } }
        project.reload
        expect(response).to(have_http_status(:success))
      end

      it "creates a status change comment" do
        expect do
          patch(toggle_status_project_url(project), params: { project: { status: :inactive } })
        end.to(change(StatusChangeComment, :count).by(1))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested project" do
      expect do
        delete(project_url(project))
      end.to(change(Project, :count).by(-1))
    end

    it "redirects to the projects list" do
      delete project_url(project)
      expect(response).to(redirect_to(projects_url))
    end
  end
end
